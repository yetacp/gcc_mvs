Release Notes for GCCCMS
------------------------

This document explains what needs to be done to get GCCMVS from:

http://gccmvs.sourceforge.net

to run on VM/CMS. The code is designed to work on VM/370,
VM/380, VM/XA and z/VM. You just need to set the
appropriate configuration before building.

Note that when used on an non XA capable version of CMS,
only the 24-bit version of the module is created. Otherwise,
an RMODE 24 AMODE 31 module (ie XA-style) is produced as
well. Sites running z/VM, but without the High Level Assembler
(or compatible product) need a modified version of IFOX 
(see below) which increases the number of externals allowed.

The notes for the MVS version of the compiler (gccmvs.txt)
should be read in conjunction with this document. In particlar
the section on conversion from ASCII to EBCDIC is relevant to VM.


Overview of changes for VM/CMS
------------------------------

Note that you will probably need to put:
SET LDRTBLS 25
or similar in your PROFILE EXEC etc to provide the resources
that GCC requires.

While you're doing that, you should probably add "PDPCLIB"
to your "GLOBAL TXTLIB" command, preferably at the front.

The changes to the main GCC code in GCCMVS to support CMS
are fairly minimal, mainly confined to include file processing.

However, the changes to PDPCLIB (the C runtime library) are
more extensive. An old version of the MVS assembler interface
was used as a base, and similarities remain between the MVS
and CMS versions. The main differences are:

1) The CMS assembler only supports the OS/MFT (OS/360) macro 
   formats. The GCCMVS run time uses some OS/MVS macros, which 
   had to be changed back to the MFT versions.

2) The conventions for passing command line parameters to CMS 
   programs is different to that in OS.

3) The low storage layout is different (PSA macro in OS, NUCON in CMS).

4) CMS execs are needed to replace the PROCS and JCL files used in GCCMVS.

In addition, two changes to CMS are required to build GCC on VM/370. 
These are as follows:

1) The IFOX assembler needs modifying to allow more than 256 
externals per program. (this change is also required for z/VM
users still using the IFOX assembler).

2) The CMS loader needs modifying to allow more than 256 externals 
per load module.

Neither of these changes are included with this distribution. Both 
may be found in the "files" section of the Yahoo H390-VM "e-group". 
Note that if you are using VM/380 or the VM/370 Sixpack, these
changes are already included.


Installing the compiler on VM
-----------------------------

To install from scratch you need to cross-compile from another 
platform. Scripts are provided for MS Windows and Linux. 

First of all you need to get the source code by:

1. Downloading the GCC base code (as per GCCMVS).

2. Downloading the MVS & CMS patch and applying it (as per GCCMVS).


You then need to set the configuration properly.

There are 4 distinct CMS programming environments possible:

1. VM/370 where everything is 24-bit. This is the S370
environment.

2. z/VM with native CMS macros where it is possible to write
31-bit executables that reside above the 16 MB line. Since
PDPCLIB uses MVS emulation macros which can't handle being
run from above the line, this environment isn't yet available.
If this changes in the future, this would be the S390
environment.

3. VM/380 where 31-bit executables can be created, but they
must reside below the line and they can only obtain a single
chunk of ATL memory (current restriction). This is the S380
environment.

4. VM/XA where 31-bit capability exists, but I/O macros
necessitate that the executable must reside below the line.
z/VM users fall into this category. This is also the S380
environment.


The differences between categories 3 and 4 are as follows:

1. VM/XA can get control in 31-bit mode, not requiring
an AMODE switch.

2. VM/XA can make multiple ATL memory requests.

3. VM/XA will remain in 31-bit mode after an SVC 202 call.


Rather than create another flavor of the code, PDPCLIB
was written such that S380 mode:

1. Detects whether it was called in 31-bit or 24-bit mode
and switches to 31-bit mode if not already in that. This
code is in cmsstart.asm and could potentially be removed.

2. Uses an internal heap manager (memmgr) so that only a
single request for a chunk of 31-bit memory is made. This
is faster than repeatedly calling the operating system
anyway, but can be reversed out by not defining USE_MEMMGR
in stdcompm.bat and stdcomp.parm.

3. Switches to 24-bit mode prior to calling SVC 202. This
can be reversed out in cmssupa.asm if required for some
reason. The technical reason why this is required is
because the version of CMS used in VM/380 runs in BC mode
so cannot preserve the AMODE flag over an SVC call itself -
instead Hercules/380 has been coded to detect a PSW being
loaded and if it matches the last known transition, the
AMODE is set based on that, which doesn't work with SVC 202
because the SVC doesn't return to the same point.


You need to decide what mode:

1. You want the GCC executable to be.

2. You want executables produced by GCC to be.


The execs are set up by default to produce a S/380 GCC
executable using memmgr (which will thus work on both
VM/380 and z/VM), and the executables subsequently
produced are S/370 (which will thus work anywhere).

If you are using z/VM you have the option of switching
off memmgr for the GCC module by getting rid of USE_MEMMGR 
in stdcompm.bat and stdcomp.parm. You may wish to do this
to create a more flexible module that uses up less storage
for small compiles, and for really huge compiles, will
not exhaust the fixed limit that memmgr has. Neither
thing is likely to be a genuine concern, so the default
setup should be fine.

On every version of VM, you have the option of using a
S/370 version of GCC, and it will still work for most
practical uses. It won't compile very large programs
with full optimization though (such as some of the GCC
source code itself) since it exceeds the 16 MB limit.
However, if you wish to do this, then overwrite pdptop.mac
with pdp370.mac and switch off USE_MEMMGR in stdcompm.bat
and stdcomp.parm and set ALL370 to 1 in compile.exec.
Also you may need to change all occurrences of the
maclib DMSGPI to CMSLIB.

On VM/380 and z/VM you have the option of getting GCC
to produce S/380 modules. This is done by setting BLD to
380 in compile.exec and defining USE_MEMMGR in stdpdp.parm.
On z/VM you can skip this last step, ie don't change
stdpdp.parm, and you can produce VM/XA modules without
the use of a heap manager (this will produce executables
that typically use less memory but have the ability to
use larger amounts of memory if required).


Once you have made the changes you require for your
environment, you are ready to build everything. The
"allcms.bat" file may be useful to do that in some
circumstances. But the documentation below is for
the individual steps.


As mentioned, you need an assembler that can handle more
than 256 externals. By default it is assumed that you are
using ASMAHL (High Level Assembler) which fits that purpose.
If instead you are using ASSEMBLE (Assembler/XF aka IFOX00)
you need to modify gccaall.exec to specify that as your
assembler name. Also you should modify gcce.exec and
gccr.exec


Now you can build the cross-compiler using "compile.bat"
(or "compile" under Unix). This will produce a version of GCC 
that can produce 370 assembler on Windows. You need to pass a 
parameter to compile.bat of -DTARGET_CMS, ie:

compile -DTARGET_CMS

Now use compmvs.bat (compmvs in Unix) to create a set of 
assembler source file containing the CMS version of GCC, ie:

compmvs -DTARGET_CMS

Don't worry about the fact that the executable is called
gccmvs.exe and the batch file is also called mvs.  The
name is shared, but they are different.


You now need to bundle up all the source (assembler, C,
headers, execs, parms) and transfer it to VM. There are
a lot of different ways you can accomplish this and it
is beyond the scope of the GCCCMS install to specify how
to do this.

However, one example method is explained here.

zipmvs.bat (zipmvs in Unix) will zip up all the important
source code. These zip files can then be unzipped into a
single directory and then rezipped to produce a convenient
single zip file. Should be zipped with no compression
though (zip -0).

If you have cygwin (or real Unix) you can run the "cmsutil"
batch file to generate a text file which can then be
transferred via the card reader (you will need to add a
"USERID GCCCMS" or similar (without quotes) to the first
line of the file if you are using VM/370 or VM/380. This
file can then be assigned to the card reader and then a
"readcard * *" can be done, followed by "cmsutil" and you
will end up with an mvsunzip module. VM/380 comes with
this already done and you can see the technique already
done too.

So now that you have the mvsunzip module and the zip
file, you can marry them together.

On z/VM you will probably use ind$file to transfer the
zip file in binary mode. On VM/370 and VM/380 under
Hercules you will probably use a TDF tape file and
point to the zip file. Then run:

mvsunzip dd:hrcin a

assuming your tape is on filedef HRCIN and you are
extracting to the A disk.

Next let's discuss disks. GCCCMS is designed to be built
in a "standard build environment" (used by other programs)
which consists of 3 disks.

1. All the source code and building.
2. The final executables designed to eventually be installed on the Y drive.
3. A work disk.

These are typically A, B and C.

The EXEC "COMPILE" (and its front-end, "ALLCMS"), takes 
those 3 letters as parameters. If for some reason you only 
have one disk, you can set them all to A, in which case the
executables won't be separately copied to B, and there 
won't be an assembler verification (which is what the work 
disk is used for in the case of GCCCMS's build exec).

To build GCC, the first disk (let's assume A - and because
other commands assume A, this is likely to be the only
option that works fully) needs to be at least 46 MB in size. 
VM/370 allows a disk up to about 52 MB, so it's probably 
best to just define the max.

The B disk needs to be about 7 MB in size, mainly for the
GCC and GCC370 modules.

The C disk needs to be about 18 MB in size - it contains a
copy of the generated assembly code.


On VM/380 (and some VM/370) you will find disks suitable
for compiling GCC that are set up under a GCCCMS userid.
The 291, 391 and 491 disks are set to the maximum (52 MB)
allowed.


Also note that for full integrity, you can use bison and
sed to generate the generated file. The batch file "fullcms"
is used to do this, and is what is used prior to a release.



Using the compiler
------------------

The run time has a number of differences to the GCCMVS compiler.

1) As VM parameter passing is (at least on VM/370) all upper 
case, 8-byte tokens a facility exists to read the parameters 
from OS DD name SYSPARM. Simply define this file and the
command line will be picked up from the first line of that
file. Another facility available is to provide a command line
at the same time as defining a dummy SYSPARM, and it will go
into special processing. This means (unless the first parameter
is "_+") lowercasing everything, eliminating the space gaps
(spaces require a _ before them to be preserved) except for
characters prefixed with a "_" which will be uppercased (or
if "_+" was specified at the beginning - lowercased).

2) If you omit the "DD:" from the front of a filename passed 
to the I/O open routines the run-time code will assume it has 
been passed a CMS file name. If the name contains a "." it 
will be assumed it seperates the filename and filetype. As the
code still uses OS emulation SVC202 is used to issue a "filedef" 
command to define the file to the code.

To compile, assemble and link a program "TEST C A" use the 
following commands:

GCCE TEST C A
LOAD TEST (NOAUTO
GENMOD TEST
TEST

(note that this relies on the GLOBAL TXTLIB having PDPCLIB
in it so that it can resolve the externals)



Version
-------

To find out version, you can go:

GCC --version



Support
-------

Try asking a generic GCC question here:

http://tech.groups.yahoo.com/group/hercules-os380/

If your question is more VM-related than GCC-related,
a broader range of VM expertise is available here:

http://tech.groups.yahoo.com/group/H390-VM/

The main people who contributed to and are familiar with 
GCCCMS are Dave Wade, Paul Edwards and Robert O'Hara.



z/VM example
------------

Example of using ind$file via c3270.

"cmsutil" is run to create a file like this on the PC
(note that there is no userid):

:READ FILE1 EXEC A
fdfdfd
:READ FILE2 ASSEMBLE A
defkkd

convert to binary format, e.g:

loc2ebc cmsutil.txt cmsutil.card 80

log on to z/VM with c3270

Get into c3270 command mode with ctrl-]

transfer file with:

c3270> transfer localfile=cmsutil.card "hostfile=cmsutil card" 
direction=send mode=binary exist=replace

(note that text mode didn't seem to work for me)

enter to get back to z/vm

SPOOL PUN *
PUNCH CMSUTIL CARD (NOH

readcard * * (nop replace


Compile the utilities by going:

cmsutil

Then back on the PC use "allcms" to create all.zip,
encode it to be printable characters, then convert it
to EBCDIC. This is done to avoid problems with the CR
being stripped by the file transfer (it seems that c3270
reads files in text mode regardless).

Then transfer the encoded binary up

c3270> transfer localfile=xfer.card "hostfile=xfer card b"
direction=send mode=binary exist=replace

edit runspool exec to fix drive numbers

access 191 d

Then:

runspool

(although it's better to rename this script so that
you don't lose your drive letter changes and end up
with a disaster).
