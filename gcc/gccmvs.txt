GCC and PDPCLIB for z/OS and MVS/380
------------------------------------

This is a port of GCC version 3.2.3 to MVS (all versions
of MVS, from z/OS down to 3.8j plus MVS/380). GCC 3.2.3
doesn't ship with a C runtime library suitable for use
on an MVS environment, so for that, PDPCLIB is included,
to provide a complete solution to all your programming
needs. So long as you only need an ISO C90 (ANSI C89)
compiler, anyway!

Although GCC originated on an ASCII Unix environment,
this MVS version of GCC is completely unrelated to that
environment. It is an MVS EBCDIC compiler throughout. 
Built on MVS, using only tools that are also available
on MVS. It does not need or use a USS environment.
And if you obtain the base tools and source from an EBCDIC
environment, you need never see anything in ASCII ever.

The same can be said of the C runtime library. Although
there is an ASCII Windows version of PDPCLIB available
too, the MVS version was written for MVS, not Windows.

So too is the case with 24-bit support. Although MVS
3.8j (24-bit) is a supported environment, every fullword
of the provided GCC is purely 32-bit, and both GCC
and the modules it produces will work on MVS 3.8j as
24-bit, MVS/XA and above as 31-bit, above the line as
well, and on MVS/380 you can actually run in AM32
and address up to 4 GiB of memory if your machine is
appropriately configured.

Nor does the fact that GCC is copyrighted with a variety
of licencing conditions (see the COPYING file in the
GCC base source code) impact on your commercial use of
load modules you compile with GCC. Every byte of
PDPCLIB is public domain (no code is accepted otherwise).
Thus every byte of your executable is either your own
work, thus copyrighted by you and you alone, or it was
from PDPCLIB, and thus can be used as freely as you
can use Shakespeare's "Hamlet". There is absolutely no
licencing restriction. No crediting. Nothing. No
restriction on modification. No requirements on you to
do anything if you modify it. No restriction on selling
it, with or without modification. And no need to ask
permission - it is already granted.

In principle, GCC will work with C runtime libraries
other than PDPCLIB (e.g. Dignus is a defined GCC target,
and was the base for the PDPCLIB target, since GCC 3.2.3
was generating nice, flexible code for that target).
Also in principle, PDPCLIB will work with compilers other 
than GCC, and indeed, the first time PDPCLIB worked on
MVS, it was after having been compiled by C/370. In practice,
GCC's MVS target and PDPCLIB have matured, and continue
to mature, hand in hand.  This combined product is
known as "GCCMVS" in the MVS environment, "GCCCMS"
in the CMS environment, "GCCVSE" in the VSE environment
and "GCCMUS" in the MUSIC/SP environment.



QUICK START
-----------

Run GCC.JCL(EXAMPLE) to make sure it works.



OBTAINING
---------

The normal way for a z/OS user (systems or application
programmer) to obtain GCCMVS is via an XMIT tape downloaded
from the sourceforge website:

http://gccmvs.sourceforge.net

The normal way for an MVS/380 user to obtain GCCMVS is to 
simply wait for a new version of either to be released, 
which normally comes with the version of the compiler that
was latest at the time of release.

However, the XMIT can also be used on MVS/380 (and indeed,
MVS 3.8j).

But probably the most convenient way of obtaining it is
from the "SEASIK" DFDSS dump, which contains a number of
freeware products.

If you prefer, the compiler can also be produced by
building it from scratch from source code. When it is done
this way, it is done on the assumption that the MVS
system does not already have a C compiler or tools
available, and will thus do a cross-compile (on an ASCII
machine). This is a very involved process, although it is
usually done in an automated manner.



DATASETS
--------

The following datasets are included in the XMIT:

required:
GCC.LINKLIB - the compiler
PDPCLIB.NCALIB - the C runtime library binaries
PDPCLIB.INCLUDE - the C header files
PDPCLIB.MACLIB - assembler support files

optional:
GCC.PROCLIB - compile procedure
GCC.JCL - compile JCL
PDPCLIB.LINKLIB - some useful utilities
GCC.DOC - documentation for the C compiler
PDPCLIB.DOC - documentation for the C runtime library
GCC.SOURCE - complete source code for C compiler
GCC.INCLUDE - header files for C compiler
PDPCLIB.SOURCE - complete source code for the C runtime library
GCC.S2 - assembler code (stage 2 output) used to build GCC load module



BUILDING FROM SOURCE
--------------------

There are at least 5 different things you could do that 
could be described as "building from source code", and
it depends on what you are trying to achieve that would
determine which, if any, of these you would choose:

1. Using assembler, simply set PDPTOP in PDPCLIB.MACLIB
to be the version you want (S/390, S/380 or S/370) then
reassemble the code in GCC.S2 using the STAGE1A and 
STAGE1B JCL to produce the GCC load module. In STAGE1B, 
you should rename "MODULE" from "STAGE1" to "GCC". After
doing that, you have another opportunity to change
PDPTOP, for what you want your own executables to come
out as. Then on z/OS submit STAGE4 to compile the C runtime 
library.  MVS 3.8j and MVS/380 users should use STAGE4Z 
instead.

2. Compile the C code in GCC.SOURCE by running through
the STAGE2 and STAGE3 jobs, using the provided GCC
executable. Then run STAGE4.

3. Same as 2, except use BISON and SED to generate some
of the C code which is actually generated code.

4. Take the ASCII patch file, and the ASCII base gcc 3.2.3,
build a cross compiler, generate the assembler, put that
on MVS, then run stages 1 to 3 to build the executable
with verification. This is what is described at length
below. This is a non-trivial task.

5. Do number 4, then with the newly-built compiler, go
and build BISON and SED, then compile the compiler again,
this time using the tools, and then verify that all
generated code is as expected. This is what the MVS/380
build used to do.



THREE STAGES
------------

Compilers are normally built in 3 stages.

STAGE 1 - using a compiler from another vendor, or from
an earlier version of your own compiler, or using a
cross-compiler, compile your new compiler.

STAGE 2 - using your just-built new compiler, recompile
your compiler again, to produce a new module. This new
module will most likely be significantly different from
the previous one, because it used your own compiler,
rather than another vendor's, so will have generated
different code, even though both sets of code work fine.

STAGE 3 - using your NEW just-built module, once again
recompile everything to produce a new module. This new
module should be identical to the one you used (although
there may be timestamp differences, depending on your
build environment). If it isn't, it means that there's 
a bug in your compiler that is affecting the compiler itself.



OBTAINING BASE SOURCE
---------------------

GCCMVS is simply a patch of around 190k (zipped) on 
top of standard GCC 3.2.3. Standard GCC 3.2.3 can be 
obtained from:
ftp.gnu.org/gnu/gcc/gcc-3.2.3/gcc-3.2.3.tar.bz2
File is dated 2003-04-23 00:00 and is 
20,662,887 bytes in size.

However, you would probably be better off with the smaller:
ftp.gnu.org/gnu/gcc/gcc-3.2.3/gcc-core-3.2.3.tar.bz2
File is dated 2003-04-23 00:00 and is 
10,324,429 bytes in size.
Note that if you use this core file, there are 6
files in the patch that won't get applied (you'll
see an error during the patch), but they aren't
important, and don't interfere with the running of
the scripts (ie it won't prompt you).

The official place to obtain the GCCMVS patch from is:
http://gccmvs.sourceforge.net

GCCCMS (GCC for CMS) is part of the same product,
and you can read gcccms.txt for further information.
Read gccvse.txt for further information about the
VSE port. Read gccmus.txt for further information
about the MUSIC port.

Note that at the moment there is a separate, but
similar, product - GCC for USS on OS/390, z/OS,
maintained by David Pitts, which is available from here:
http://www.cozx.com/dpitts/gcc.html
A lot of code is shared between the two projects, but
not all. The code may coalesce in the future.

Also note that if you are using MUSIC/SP, there is
an older port to MUSIC produced by Dave Edwards (RIP),
and available here:
http://webpages.mcgill.ca/staff/group3/dedwar1/web/gccmu10.zip
There are some minor code changes in it, and the compiler
is way out of date.


You will also need to obtain PDPCLIB.  The official
place to get PDPCLIB from is:
http://pdos.sourceforge.net



PREPARING INITIAL SOURCE
------------------------

If you obtain GCCMVS in source code form, then
you need the following tools:

1. The "patch" utility (Unix standard).

2. a C compiler (by default, gcc for windows with
pdpclib for windows is used (which also requires a
"make" which supports spaces, such as the one from
Borland C++, or else you need to change all spaces to 
tabs in the makefile), but you can use C compilers 
other than gcc, and you can use standard gcc without
pdpclib for windows too).

3. Miscellaneous decompression tools such as bzip2
and tar (normally you get these by installing Cygwin).

So do the following (note that all these commands
and the rest of the process is contained in cygwin.bat
as an EXAMPLE of what you MIGHT want to do if you had
a standard cygwin install and wanted to be up and
running as quickly as possible, and allmvs.bat MIGHT,
after modification, be used for someone doing a gcc/pdpclib 
win32 build (this is the combination that is exercised
in development) - and you can see this being done in the
build scripts for MVS/380):

bzip2 -d gcc-3.2.3.tar.bz2
tar xvf gcc-3.2.3.tar
ren gcc-3.2.3 gcc
cd gcc
patch -p 1 -f <patch.txt (whatever the patch file is called)

Note that this file that you are reading right now is
called gccmvs.txt and after you've applied the patch,
you can switch to reading the gccmvs.txt that just got
produced. Just in case the one you are reading now is
out of date.

For your information, some of the files in
the gccmvs patch were originally obtained by doing:
./configure --target=i370-ibm-mvspdp --enable-languages=c
but you should NOT do that, otherwise you will
overwrite various working source files with
non-working ones.


You will also need to extract PDPCLIB. You should
create a dummy "pdos" directory, and create a "pdpclib"
directory under that (which is where all the PDPCLIB
files should go), and then place "pdos" and "gcc" at the
same level, so you end up with a structure like this:

gcc/include
gcc/gcc
gcc/libiberty
pdos/pdpclib

It needs to be like this because the compile scripts
assume these relative paths and names.



COMPILING CROSS-COMPILER
------------------------

Then, assuming you are doing this from a DOS
prompt, change to the gcc/gcc directory and go:

gencomp (this step is actually optional, as the
source files it generates are actually already
part of the patch, so you're probably better off
omitting this step, and it assumes you are using
gcc as your compiler).

compile

which will create an executable called gccmvs.exe
on Windows, or gccmvs on Unix.

First problem - by default, "compile.bat" is set up
to compile using gcc/pdpclib-win32. You can easily
change this to use some other compiler, but if you
want to use the default, it requires you to actually
build pdpclib-win32 according to the instructions
included in pdpclib.txt in the pdpclib directory.
The advantage of using pdpclib-win32 is that it means
that the C runtime library you use for the PC is the
same/similar to that which is being used on the
mainframe, so if you were to hit a bug, you will find
out the problem on the PC before you get to the
mainframe. Another advantage is that it bypasses the
buggy newlib headers which pollute the namespace with
Unix rubbish which sometimes causes problems.



CHOOSING TARGET ENVIRONMENT
---------------------------

There are actually 3 distinct architectures supported:
S/370
S/380
S/390

The pdptop macro determines which one will be used.
Normally, and by default, the S/380 version is used,
and there is no real reason not to use it. The
S/380 flavor is designed to passively accept whatever
AMODE and RMODE the module is set to - normally
AM31/RM31, and will behave nicely on z/OS.

However, there is an issue if you try to run the
module on MVS/XA. Some time during MVS/ESA, IBM provided 31-bit
versions of the "PUT" etc macro (and supporting infrastructure)
so that you could actually have a clean AMODE 31, RMODE ANY
executable. Prior to that time, any executable that needed to
call "PUT" needed to be RMODE 24 and switch to AMODE 24 before
calling "PUT", then it could switch back to AMODE 31. ie it was
a hybrid of sorts.

As such, if you wish to run on MVS/XA, what you need
is a module that switches to AM24 before calling "PUT"
etc. The S/380 module will automatically do that if
you mark the module as AM31/RM24. You don't need to
recompile your module. Note that S/370 hardware
doesn't have the "BSM" instruction so can't switch
AMODE. In order to still run on MVS 3.8j, the S/380
module will not attempt to switch to AM24 if it is
already running in AM24, as is the only choice on
MVS 3.8j. What this means is that one single module
will work optimally in all environments. You just
need to use the "PDS" utility to mark the module
as RM24 if you are running on MVS/XA. You don't need
to do that if running on MVS 3.8j because the AMODE
and RMODE flags will be ignored. On MVS/380 at time
of writing, modules are never loaded ATL, even if
they are marked RMANY, so there is no need to use
the "PDS" utility there either. In the S/380 model,
GETMAIN with LOC=ANY is used to obtain ATL memory
for application usage. Note that this parameter is
ignored when run on MVS 3.8j.

Now the difference with S/390 is that there is no
step-down (to AM24) logic, and memory is obtained
with a default LOC=RES, and so long as the module
was loaded ATL, you will get ATL memory for your
application. The module is technically ANY/ANY as
when running it doesn't use features that don't exist
in MVS 3.8j, such as GETMAIN LOC=ANY.

The difference with S/370 is that you can use it
in an environment with an assembler with no BSM.
The resulting module can only be run as AM24 as
macros like PUT are not 31-bit clean on an
unmodified MVS 3.8j.

For full integrity on S/380 or S/390 you can also run gencomp,
so you need to change gencomp.jcl to replace occurrences
of "BISON" and "SED" to whatever you have called
your installation libraries for those two products. The script
"withbis" will do a full build assuming bison is available,
and that is normally called via "fullmvs" to package GCCMVS
ready for distribution. Note that the building of MVS/380
previously did all these steps to create a pure mainframe
product.



GENERATING ASSEMBLER
--------------------

Now run the "compmvs" script.

(unless you want to use the unmodified IFOX on MVS 3.8, in which 
case go "compmvs -DIFOX")

This will generate S/370 assembler code (clean, 32-bit
assembler).

You now need to get all the stuff up onto the mainframe.

This is your big chance to screw things up.
You need to transfer these files with the
same ASCII to EBCDIC translation that GCCMVS
expects.  Easiest to stuff up are the following:

| x'4f'
^ x'5f'
[ x'ad'
] x'bd'

If you actually try transferring this file you
are reading now to the mainframe, and do a
search on "screw" and put "hex on", you can
see how successful you are likely to be. However,
there are ways to avoid bad translation tables,
and having to deal with so many files as well.

For example you could use the "mvsunzip" and
"mvsendec" tools that come with PDPCLIB. These allow
you to zip up code (but without compression), encode
into printable hex (translate tables are never so bad
that they can't handle A-F and 0-9), and then reverse
the process on the mainframe. However, to reverse
the process, you still need to get those utilities
onto the mainframe in the first place. For that,
if you have m4 installed, you can run the "makeutil"
script to produce a convenient batch job that
compiles these basic utilities.

All such file transfer methods are beyond the scope
of GCCMVS. The example (stress - example) jobs below
assume an emulated tape is being used. This is a
convenient method for MVS/380 users.

The JCL is all set up to use particular prefixes in
proc statements - GCCPREF and PDPPREF.  Thus they 
all need to be changed, as well as any JOBCARD 
changes your installation requires, unless you're
happy with the defaults of "GCC" and "PDPCLIB". jcl, 
m4 and prc files all need to be changed.

It is recommended that you spend the time to automate
the process of changing the jobcard so that you can
rerun these jobs again and again. You could set up an
edit macro in ISPF or you could make use of the
"fixjcl" batch file on the PC to make the changes. Note
that on your jobcard, you don't need REGION=0K, you can
get by with something like REGION=50M, or maybe even as
low as 25M, depending on a few things.



RUNNING JOBS ON MVS
-------------------

You probably want to run stage0a.jcl to create high-level
aliases for GCC and PDPCLIB. The exception is if you do
not have authority to create new aliases, and wish instead
to run the compiler out of your own libraries. In which
case you would be using a high-level prefix of perhaps
"userid.GCC" and "userid.PDPCLIB" instead, and thus no
aliases are required. Note that the compile JCL also expects
a 'SYS1.MODGEN' to exist. This doesn't exist on TK3, so
you will either need to create an alias for it, or modify
the JCL to replace MODGEN with AMODGEN.

Next run stage0b.jcl to allocate the datasets which will
eventually store the source code etc from the PC.

The next steps are an example of how to get the source
code from the PC to mainframe. It uses zip on the PC
side, and minizip on the host side, and emulated tape
inbetween. Replace these steps with whatever your site
uses.

In order to get minizip onto the host if it isn't
already there, you can run "makeutil", which is
called by "bootstrap". Assuming the pre-existence of
minizip, or something similar, zip up all the source
code etc to go to the mainframe by running "zipmvs".
Note that for for complete integrity on a 31-bit 
system, it would be good if you edited zipmvs.bat and 
removed all those "rem" statements down the bottom. This 
will prevent you from uploading the generated source,
and force gencomp to generate them instead. The script
"withbis" will do this automatically.

stage0c.jcl is then used to transfer the zip file up.

stage0d.jcl then executes minizip to unzip the zip files.

That ends the involvement of the PC, as everything is
now on the host.



BUILDING STAGE1
---------------

Run the JCL from GCC.JCL(STAGE1A) and GCC.JCL(STAGE1B).
This will create the stage1 executable, which is a 
working gccmvs, the only disadvantage of which is that
it was compiled on the PC instead of the mainframe.

If you had another vendor's compiler, or an old version
of GCCMVS, you could have built this on the host in
the first place.



GENERATED FILES
---------------

For complete integrity on a 31-bit system,
you can run GCC.JCL(GENCOMP), which will
regenerate all the generated source files.
This assumes that you have bison and sed
available. If you don't have them, you can
compile them using the stage1 executable,
and you can temporarily rename stage1 to gcc.
If you already have old copies of bison, sed
and gcc, there is no need to recompile them
now with stage1. That step happens later.



BUILDING STAGE2
---------------

Next run GCC.JCL(STAGE2A-C).  Making use of
the just-compiled STAGE1, it will compile from
source code the entire gccmvs suite, this
time to create an executable called STAGE2.

Note for MVS 3.8j users: Due to memory requirements,
you cannot build a stage2 compiler. You should
instead just rename this STAGE1 compiler to GCC,
copy it to GCC.LINKLIB, then pick up again in
STAGE4(Z).



BUILDING STAGE3
---------------

It so happens that the process used to build the stage1
compiler, being from the same vendor, has generated
identical code to that produced in stage2. So, it is
possible to compare the stage1 and stage2 executables,
without needing to go to stage3. As such, stage2d is
designed to do the comparison prematurely, and avoid
the need for STAGE3.

If that is not your situation, you will now need to
run the STAGE3(A-C) jobs, which will compare with the
output of STAGE2.  The other situation where you
will need to run STAGE3 is if you ran GENCOMP, as
the source code will have changed slightly as a
result of that.

When STAGE3C completes, it verifies the integrity
of the compiler output, then produces a GCC module.
During that process, a GCC.S2 file is produced
containing the generated assembler. This can then
be transported to any other system, even MVS 3.8j
with memory constraints, to produce a perfectly
viable C compiler, just by reassembly.

Note that if the executables STAGE2 and GCC (aka
STAGE3) were not identical, then there is a compiler
bug somewhere that is affecting the integrity of
the compiler itself.



FINALIZING
----------

Now run GCC.JCL(STAGE4). MVS 3.8j and MVS/380 users
should run STAGE4Z instead, because of the 15 alias
restriction on these systems. This will compile
PDPCLIB, the C runtime library. You have the option
of changing PDPTOP to choose a different architecture
to target for your own executables.

Now clean up all the intermediate datasets by
submitting STAGE5A.

Then (optionally) compile some useful utilities from
PDPCLIB by submitting STAGE5B.

Now if you're a systems programmer, you can choose to
install the procs in GCC.PROCLIB into SYS1.PROCLIB
etc, after modifying them to your site's requirements.
Submit STAGE5C to do that.

STAGE6.JCL is not required to be run. It is only
used in circumstances where you want to dump the
datasets to tape and then reload them.


Congratulations, you now have GCCMVS fully installed.

You can now compile your own C programs by
running the example jcl found in GCC.JCL(EXAMPLE),
or if you have installed the procs, then EXAMPLE2.



BISON and SED
-------------

For complete integrity on a 31-bit system,
you should now go and recompile bison and sed,
then rename your GCC.SOURCE and GCC.INCLUDE
to ".OLD" datasets, repopulate them (from the
zip files), then run GENCOMP (to repopulate
the generated source files), and then confirm
that the source and include haven't changed
with your new compiler by comparing with the
old datasets. The MVS/380 build scripts do this
as part of the process, by running the "withbis"
script. However, the integrity of the tools is
outside the scope of GCC proper.




CREDITS
-------

Everyone who worked on GCC in areas besides i370
  and to the people out there who contribute the
  odd fix that they developed.
Jan Stein for the original i370 machine definition
Dave Pitts for doing the port to OS/390 USS,
  without which the further work could not have
  been done.
Linas Vepstas for a slew of bug fixes and enhancements
  made during his port of Linux to S/370.
Paul Edwards for doing the port to native (ie
  non-USS) MVS 3.8, MVS/XA, OS/390, Z/OS, MVS/380
  as well as getting GCC to be able to compile 
  itself on the mainframe (previously it was 
  only compilable by IBM's C compiler).
Phil Roberts for testing & debugging & releasing
  the native MVS port created by Paul Edwards. The 
  product wouldn't exist without Phil's work either.
Dave Wade for fixing the last compiler bug that
  was preventing GCC from compiling itself on the
  mainframe, and also for doing the VM/CMS port.
  And various other bug fixes and improvements to
  PDPCLIB as well.
Chris Langford and Dave Jones for the prolog/epilog
  macros.
Dave Edwards (RIP) for doing the MUSIC/SP port and 
  fixing various bugs in PDPCLIB in the process.
Tim Pinkanawa for writing the HTML documentation.
Tim Holloway for figuring out where to put the code
  to get the static function names unique so that
  the final problem stopping the compiler from
  being C90 compliant was fixed.
Robert O'Hara for getting EPLIST support in PDPCLIB
  working on CMS and providing the mods to VM/380
  required to get 31-bit GCCCMS binary compatible
  between VM/380 and z/VM.
Gerhard Postpischil for providing the mods to MVS/380
  required to get 31-bit GCCMVS binary compatible
  between MVS/380 and z/OS so that we could build
  GCCMVS on a free system. Also for the final functions
  missing in PDPCLIB for C90 conformance for MVS and
  for the virtual rewrite of mvssupa.asm. Also for
  writing the SVC 120 intercept on MVS/380 which
  allowed GCC to be built nicely.
Scott Cosel for the XMIT JCL which enabled a nice
  package to be produced for z/OS users. Also for
  producing a real 31-bit z/OS executable using
  GCCMVS on z/OS and putting that in XMIT format to
  truly test MVS/380. Also for other testing.
Tony Harminc for assistance in getting integer divide
  working properly.
Ulrich Weigand for providing direction on tying up some
  loose ends, especially getting rid of some warnings from
  gencomp.
Fausto Saporito for his work on making the MUSIC/SP port
  native.
Fran Hensler, Bruce Smith, Bill Carlborg, Louis Millon,
  Michel Beaulieu and others for assistance and code
  for the z/VSE port.



VERSION
-------

See version.c for the version number.



SUPPORT
-------

PDPCLIB is separately maintained by Paul Edwards,
and support is generally forthcoming for that.
Certainly submission of *public domain* (ie NOT
GPL) bug fixes/enhancements are welcome.

Support for most common GCC problems is generally
available also.

The usual place to get support for either thing is
the hercules-os380 Yahoo group at:

http://tech.groups.yahoo.com/group/hercules-os380/

If your question is more MVS-related than GCC-related,
there are a number of other MVS forums linked from
os380.



TECHNICAL NOTES
---------------

Technical notes about executables created in this manner plus 
other issues:

1. A "hello, world" program is approximately 82k in size.

2. The memory requirements (not including the
space for the executable) for a "hello, world"
program are around 350k, assuming the default
stack size of 256k is being used in mvsstart.asm (and
the rest is mainly because the 3 standard files all
use 32k buffers, so that's 96k + 256k = around 350k.

3. PDPCLIB is designed to conform to the ISO/IEC 
9899:1990 (aka ANSI X3.159-1989) standard, and there
are no extensions (like "open", "chmod" etc
found on other operating systems or compilers).

4. What PDPCLIB on MVS is primarily designed for,
is fast processing of binary, fixed block datasets,
and also for text processing, via fgets, from
variable length records.  Or if you want to write a 
utility to traverse MVS control blocks, you 
can use it for that sort of thing.  When operating
on binary, fixed-length records, the path from
fwrite to the "PUT" macro is very short indeed.
The path from fputs to the "PUT" macro is pretty
short too.

5. The files that PDPCLIB operates on can be of
any format. PDPCLIB will adjust to whatever
DCB information is specified, and provide
sensible defaults when none is present.

6. The executables that are produced can be run
as both TSO command processor or in batch.  The
parameter parsing will handle either method of
invocation.

7. N/A.

8. PDPCLIB makes no attempt to operate on VSAM
datasets. It will also refuse any attempt
to open a file in update or append mode, and random
access will usually be unacceptably slow due to
the constant reopening of the file. The design of 
RECFM=U handling is to allow the "copyfile" utility
(part of PDPCLIB) to be able to do a binary copy 
from a VB file, to a U file, to an FB file, back to 
a VB file, and have the files still be identical.

9. Note that the "-g -dA" option can be used to get
source file line numbers inserted into the assembler
file.

10. The compiler generates excessive instructions,
reloading the base register at every single label.
The smarts are already in the code generator to
avoid this, it's just that they're not quite smart
enough, so needed to be disabled! Search for do_spec_1
in i370.c to see the problem. An exception has been
made for functions that fit in a single page. This
gets around the vast majority of the problem.

11. You need to have an assembler capable of handling
more than 400 externals. If you are using the (very
old) IBM-supplied IFOX, then you need to apply this
patch:
http://www.prycroft6.com.au/vs2mods/download/asmxfesd.zip
If you really must use an unmodified IFOX, you can
compile with "-DIFOX" which will disable some externals
that you may be able to do without. It is not recommended
or supported.

12. The compiler requires approximately 20 MB of memory to
compile everything optimized, on top of the GCC executable
itself (3 MB). Specifically FOLD@CON won't build with only
19 MB of memory for data. This means you can't complete the
normal build process on any S/370 machine. However, switching
off optimization on that module will get the total memory 
requirements down to about 14 MB, which means that it is
within the ability of VM/370 to compile either all unoptimized
or with just the largest 3 unoptimized. However, even getting
rid of TSO and VTAM won't give you a 14 MB total under MVS 3.8j.
Fixing the excessive base register reloads in gcc would make a 
bit more memory available. Perhaps a proper alloca() would
make a difference too. It's all fairly academic though when
compilation on z/OS, MVS/380 or the PC will get around all
such problems.

13. Note that the source and include files are generally
stored in VB files, except for the bits with assembler in
it, which need to be FB80.

14. When importing a new release it is necessary
to allow c-parse.c to be imported. This is set to 
ignore in .cvsignore. We have a local modification
to c-parse.c that allows it to handle both ASCII
and EBCDIC. But there is actually no need to use
this modified c-parse.c, as a version that works
on EBCDIC can be generated using bison on an
EBCDIC host, and that is in fact what the "gencomp"
JCL does. But if you don't have bison, you will need
this modification. While updating .cvsignore, it
is also best to get rid of the genrtl.c and genrtl.h
from there, to allow them to be imported if they exist.

15. Most generated files are generated by "gencomp".
But some unimportant ones were generated by using
"configure" and "make".
The command to run configure is:
./configure --target=i370-ibm-mvspdp --enable-languages=c
But be careful, as this will overwrite some files that
have been created by hand, and you don't want that.

16. Since the S/370 target as it stands doesn't dedicate
a register for a frame pointer, the stack pointer and
frame pointer are both set to R13. As such, alloca() can't
allocate space on the stack. So, it was necessary to modify
the builtin_alloca() function to stop it from allocating
space and letting it call alloca() instead. This could
all be changed, but would add an additional complexity.

17. The assembler code generated by gccmvs when run on the
PC is slightly different (even when the same parameters
are used for code generation) from that when run on the
mainframe, if -O2 is used instead of -Os. But functionally 
equivalent. This non-deterministic nature of the compiler 
is disconcerting. It seems to not always allocate registers 
consistently. This has been traced to floating point code
in predict.c and local-alloc.c which is sensitive to the
very small changes in floating point representation. This
should be changed to include deltas when comparing floating
point values. Here's an example of what's happening:

*** c-lex.s Mon Jan 14 20:48:35 2008
--- temp.dat Mon Jan 14 21:14:04 2008
***************
*** 1328,1335 ****
           SLR   15,15
           STC   15,0(3,4)
           SLR   6,6
-          LR    9,6
           LR    8,6
           L     2,192(13)
           CLR   2,5
           BNL   L303
--- 1328,1335 ----
           SLR   15,15
           STC   15,0(3,4)
           SLR   6,6
           LR    8,6
+          LR    9,6
           L     2,192(13)
           CLR   2,5
           BNL   L303


18. builtins have all been switched off in the compiler
by default (ie -fno-builtin), as they can sometimes 
generate bad code. Instead, the header file is used to
selectively enable working builtins.

19. Versions of GCCMVS up to and including 3.2.3 MVS 6.0 
should be considered betas because of the compiler bugs that
they contained. With the elimination of those bugs, GCCMVS
is now of acceptable quality.

20. nostdinc is on by default so that you have to
specify where you get your include files from on
the compile command line. There might be a better
way of doing this rather than setting no_standard_includes
in cppinit.c

21. We should look at making "configure" and "make"
work for the mvspdp target, so that people on Unix
don't need to use our custom-made scripts. They currently 
work, but the detab routines are bypassed.

22. PDPCLIB should be changed to read data a block
at a time rather than a record at a time. This will
allow us to efficiently process datasets with an
LRECL of 1, which fits the C paradigm more accurately.

23. We should consider having a utility to compare two 
executables so that we can see that the stage2 and stage3 
executables are identical. A utility to do this can be 
written as follows: BLDL each to find the length.
If lengths are equal, GETMAIN the space for it twice.
Load the first load module in the first GETMAINed space.
Copy it to the second GETMAINed space with MVCL.
Load the second load module to the first GETMAINed space.
Compare the two GETMAINed spaces with CLCL. We currently
compare assembler instead, which should be just as good.
Not sure if 2 IEBCOPY unloads could be compared instead.

24. Because MVS 3.8 has a limitation of 15 aliases in the linker
(and presumably elsewhere), the same module is linked multiple
times, to ensure all aliases can be created. This opens up the
possibility of some object code being out of date if someone
links one of the modules manually without doing the other required
links as per STAGE4Z. The alternative is to add more than 15
aliases via other means, but no-one has explained why there is
a 15 alias limit in the first place, so we don't know what the
ramifications of doing that are.

25. If you are using a compiler that gives you an error when you
compile vasprintf.c, then add a define in the compile command to
define VALIST_NOT_PTR, and that should get around the problem.
See stdcompw.bat for an example. The gcc code is basically not 100%
C90-compliant as it depends on the implementation of va_list.

26. With -pedantic-errors switched on we get slightly different
and seemingly slightly less efficient code generated. This was
not expected. pedantic-errors is desirable to aid portability.

27. I added the __extension__ keyword to genoutput.c because
I couldn't see how to get rid of the pedantic error.  This should
be replaced with something better.

28. #pragma map() and linkage exist, but don't currently
have any effect. TARGET_ALIASES would need to be switched
on for map to start having an effect.
Syntax is like this:
#pragma map(finalize_buffer, "FIN@BUF")
GCC already has:
#pragma redefined_extname oldname newname
but that's not what is normally used for MVS. And it doesn't
have any effect either! Probably because of the name
grunging being done in GCCMVS unconditionally to trunc to 8
characters and convert abnormal characters into '@' and
uppercasing.

29. Failed compiles on the PC don't clean up after an error,
so you can have a partially-produced .s file which causes much
confusion later when you have missing externals.

30. makeutil.bat has been provided to put some useful
utilities into a single JCL stream for convenient transfer.

31. GCC when compiling a program with "main()" in it, will
generate code for an entry point for the entire executable.
This entry point is called @@MAIN and is different from
MAIN. @@MAIN will then call @@CRT0 which will eventually
call MAIN.  @@CRT0 returns directly to the OS from there,
and in fact, if @@CRT0 is forced to be the entry point,
it will still work fine too. @@MAIN was introduced so that
the linker can automatically resolve things. However, that
bit of the automatic resolution will only work if you
pass the object code with @@MAIN directly to the linker,
rather than first of all creating an NCAL and then passing
that to the linker. If you wish to create NCALs, then you
will need to put an "ENTRY @@MAIN" in yourself for the
linkage editor control statements. Unfortunately this setup
has the side-effect that the entry point of modules by default
is not 0, which while perfectly technically valid, is a bit
annoying.

32. The calling convention is slightly different in GCC
compared to IBM C. Integers are passed by value rather than
reference. This is normally not visible, but we should
consider making this the same as IBM C and perhaps follow
the LE specs.

33. This file and all compile scripts etc should probably
be moved into the "config/i370" directory, but for now it
is more convenient to leave them where they are.

34. GCCMVS emits MVCL/CLCL for a memcpy/memcmp and thus
programs that expect to operate on buffers of size 16 MiB
or above will not work. If you need greater than 16 MiB
you need to either disable the builtins in string.h or
modify your code to use (memcpy) instead of memcpy, to
force the memcpy function in string.c to be called.

35. In PDPCLIB, some GETMAINs are conditional and some are
unconditional, so if you run out of memory, you will get
inconsistent behavior (ie sometimes ABEND, sometimes an
error return code to the application).
